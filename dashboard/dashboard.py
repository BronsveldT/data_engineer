#All the imports
from dash import Dash, html, dcc, Input, Output, callback, dash_table
import plotly.express as px
import pandas as pd
from pymongo import MongoClient


#Variable setup for the dashboard like db connection.
app = Dash(__name__)
mongoClient = MongoClient('mongodb://localhost:27017/')#Connect to mongodb
db = mongoClient.big_data #Connect to the database
collection = db.hotel_review #Get the schema from the database.


#The design of the dashboard
app.layout = html.Div(
    children=[
        
        html.H1(children='Assignment 2 Thomas Bronsveld', style={
            'textAlign':'center',
            'color':'black'
        }), ##End of the H1 tag in the app.layout
        
        
        dcc.Tabs(id='tabs-hotel-reviews', value='tab-homepage', children=[
            dcc.Tab(label='Homepage', value='tab-homepage'),
            dcc.Tab(label='Hotel info', value='tab-hotel-info')
        ]),#dcc.Tabs end.
        
        html.Div(id='tabs-content')
    ]) #End of the root html.Div

@callback(Output('tabs-content', 'children'),
          Input('tabs-hotel-reviews', 'value'))
def fill_tabs_hotel_reviews(tab):
    
    if tab == 'tab-homepage':
        
            #Get all the dataframes 
            df = pd.DataFrame(list(collection.find().limit(5000))) #Convert the Collection to a panda dataframe
            df=df.iloc[:, 1:] #Drop the annoying ID generated by mongodb for each record 
            print(df.head(20))
        
            return html.Div([
                dash_table.DataTable(
                    id='datatable-hotel-reviews',
                    columns=[{
                     "name": i, "id": i, "deletable": False, "selectable": False   
                    } for i in df.columns],
                    tooltip_data=[
                        {
                            column:{'value': str(value), 'type':'markdown'}
                            for column, value in row.items()
                        } for row in df.to_dict('records')
                    ],
                    data=df.to_dict('records'),
                    editable=False,
                    filter_action="native",
                    sort_action="native",
                    sort_mode="multi",
                    column_selectable="single",
                    row_selectable="multi",
                    row_deletable=False,
                    selected_columns=[],
                    selected_rows=[],
                    page_action="native",
                    page_current=0,
                    page_size=20,
                    style_cell={
                        'overflow':'hidden',
                        'textOverflow':'ellipsis',
                        'maxWidth':'0',
                        'textAlign':'left'
                    },
                    style_table={
                        'height':'300px',
                        'overflowY':'auto'
                    }
                ) #End of the dash_table.DataTable
                
                
            ]) #End of the tab-homepage html.Div
        

# @callback(
#     Output('mongo-datatable', 'children'),
#     Input('interval_db', 'n_intervals'))
# def populate_datatable(n_intervals):
    
#     df = pd.DataFrame(list(collection.find())) #Convert the Collection to a panda dataframe
#     df=df.iloc[:, 1:] #Drop the annoying ID generated by mongodb for each record 
#     print(df.head(20))
    
    
    
    
    
if __name__ == '__main__':
    app.run(debug=True)